<%@ Application Language="VB" %>
<%@ Import Namespace="System.Web.Routing" %>
<%@ Import Namespace="Microsoft.AspNet.FriendlyUrls" %>

<script runat="server">

        Sub Application_Start(sender As Object, e As EventArgs)
            ' Code that runs on application startup
            RouteTable.Routes.EnableFriendlyUrls()
        End Sub

        Sub Application_End(sender As Object, e As EventArgs)
            ' Code that runs on application shutdown
        End Sub

        Sub Application_Error(sender As Object, e As EventArgs)
            ' Code that runs when an unhandled error occurs

            ' Get the exception object.
            Dim exc As Exception = Server.GetLastError

            ' Handle HTTP errors (avoid trapping HttpUnhandledException
            ' which is generated when a non-HTTP exception 
            ' such as the ones generated by buttons 1-3 in 
            ' Default.aspx is not handled at the page level).

            If (exc.GetType Is GetType(HttpException)) Then
                ' The Complete Error Handling Example generates
                ' some errors using URLs with "NoCatch" in them;
                ' ignore these here to simulate what would happen
                ' if a global.asax handler were not implemented.
                If exc.Message.Contains("NoCatch") Or exc.Message.Contains("maxUrlLength") Then
                    Return
                End If

                ' Log the exception and without notifiying system operators
                ExceptionUtility.LogException(exc, "DefaultPage")

                'Redirect HTTP errors to HttpError page
                Server.Transfer("404")
            Else
                ' For other kinds of errors give the user some information
                ' but stay on the default page
                'Response.Write("<h2>Global Page Error</h2>" & vbLf)
                'Response.Write("<p>" & exc.Message + "</p>" & vbLf)
                'Response.Write(("Return to the <a href='Default.aspx'>" _
                '  & "Default Page</a>" & vbLf))
                ' Log the exception and notify system operators
                ExceptionUtility.LogException(exc, "DefaultPage")
                ExceptionUtility.NotifySystemOps(exc)

                Server.Transfer("404")
            End If

            ' Clear the error from the server
            Server.ClearError()

            Server.Transfer("404")
        End Sub

        Sub Session_Start(sender As Object, e As EventArgs)
            ' Code that runs when a new session is started
        End Sub

        Sub Session_End(sender As Object, e As EventArgs)
            ' Code that runs when a session ends. 
            ' Note: The Session_End event is raised only when the sessionstate mode
            ' is set to InProc in the Web.config file. If session mode is set to StateServer 
            ' or SQLServer, the event is not raised.
        End Sub</script>